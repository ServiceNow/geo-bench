import argparse
from pathlib import Path
import subprocess


def toolkit_job(script: Path):
    job_name = (
        script.parent.name.lower()
    )  # TODO actually job_name needs to be unique across all jobs? maybe we need to rethink that.
    for char in (".", "="):  # TODO replace all non alpha numeric chars by '_'.
        job_name = job_name.replace(char, "_")

    # TODO should we use another image?
    cmd = "eai job new -i registry.console.elementai.com/snow.colab_public/ssh --non-preemptable".split(" ")
    cmd += ["--name", job_name]
    cmd += ["--data", "snow.colab.public:/mnt/public"]
    cmd += ["--data", "snow.allac.home:/mnt/home"]  # TODO adapt to something more generic
    cmd += ["--", str(script)]  # TODO do we have to put absolute path? Could we use relative path of script?
    print(" ".join(cmd))
    subprocess.check_call(cmd)


def toolkit_dispatcher(exp_dir, prompt=True):
    exp_dir = Path(exp_dir)

    print(f"Scanning {exp_dir}.")
    script_list = list(exp_dir.glob("**/run.sh"))
    if prompt:
        print("Will launch all of these jobs on toolkit:")
        for script in script_list:
            print(str(script))
        ans = input("Ready to proceed? y/n.")
        if ans != "y":
            return

    for script in script_list:
        toolkit_job(script)

    print("Done.")


def start():
    # Command line arguments
    parser = argparse.ArgumentParser(
        prog="sequential_dispatcher.py",
        description="Sequentially dispatch all run.sh in the experiment directory.",
    )

    parser.add_argument(
        "--experiment-dir",
        help="The based directory in which experiment-related files should be created.",
        required=True,
    )

    args = parser.parse_args()
    toolkit_dispatcher(args.experiment_dir)


if __name__ == "__main__":
    start()
